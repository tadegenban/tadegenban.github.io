<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>tadegenban.github.io/index.html</id>
    <title>TADEGENBAN</title>
    <updated>2014-10-11T11:05:22Z</updated>
    <link rel="self" href="tadegenban.github.io/blog/index.atom"/>
    <link rel="alternate" href="tadegenban.github.io/index.html"/>
    <generator version="0.022">Statocles</generator>
    <entry>
        <id>tadegenban.github.io/blog/2014/10/11/moo-introduction.html</id>
        <title>用Moo来写面向对象perl</title>
        <author><name>tadegenban</name></author>
        <link rel="alternate" href="tadegenban.github.io/blog/2014/10/11/moo-introduction.html" />
        <content type="html"><![CDATA[
            <h2>Moose 大家庭</h2>

<p>perl的原生的面向对象是比较简单的，通过bless关键字和hash来建立对象，很灵活但也很简陋。</p>

<p>自从出现了Moose之后，perl的面向对象就很富有表现力了。</p>

<p>Moose -> Moos -> Moo -> Mo -> M, 再加上Mouse， 构成了Moose大家庭</p>

<p>从Moose到M依次功能递减， M 代表 nothing， 在不太复杂的项目一般用Moo就足够了</p>

<p>这里简单介绍一下Moo的用法</p>

<h2>Moo -- 轻量级面向对象</h2>

<p>比如我要建立一个Person对象，用Moo可以这么写:</p>

<pre><code>package Person;
use Moo;

has name =&gt; is =&gt; 'rw';
has age  =&gt; is =&gt; 'rw';

sub intro {
    my $self = shift;
    print "My name is ". $self-&gt;name;
}
</code></pre>

<p>在你的代码里就可以这么建立一个Person对象:</p>

<pre><code>use Person;

my $lip = Person-&gt;new(name =&gt; 'lip', age =&gt; 18 );
$lip-&gt;intro();
</code></pre>

<p>和perl的原生OOP一样，一个package就是一个对象。</p>

<p>Moo提供了一个<code>has</code>关键字，用来定义属性</p>

<pre><code>has name =&gt; is =&gt; 'rw';
</code></pre>

<p>表示属性<code>name</code> 是 可读可写 的，如果写成<code>'ro'</code>就表示是只读的</p>

<p><code>sub intro</code> 定义了一个方法， <code>$self</code> 是指代实例本身， <code>$self-&gt;name</code> 就可以得到name属性的值</p>

<p>下面详细介绍一些Moo的特性</p>

<h2>属性定义 -- has</h2>

<h2>对象继承 -- extends</h2>

<h2>方法修改器 -- before after around</h2>

                <p><a href="tadegenban.github.io/blog/2014/10/11/moo-introduction.html#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="/blog/tag/perl-Moo-oop/index.html">perl Moo oop</a>
            </p>
        ]]></content>
        <updated>2014-10-11T00:00:00Z</updated>
        <category term="ARRAY(0x2de4140)" />
    </entry>
    <entry>
        <id>tadegenban.github.io/blog/2014/09/23/my-our-local-state.html</id>
        <title>perl 变量 my our local state</title>
        <author><name>tadegenban</name></author>
        <link rel="alternate" href="tadegenban.github.io/blog/2014/09/23/my-our-local-state.html" />
        <content type="html"><![CDATA[
            <h2>perl 变量类型与作用域</h2>

<p>根据作用域的不同来区分，perl有两种变量类型：</p>

<ul>
<li><p>词法变量(Lexical Variable) -- 词法作用域，只在当前词法作用域内可见。</p></li>
<li><p>包变量(Package Variable)  -- 全局变量，在任何位置可见</p></li>
</ul>

<p>有三种创建变量的方式：</p>

<ul>
<li><p>my  -- 创建一个词法变量</p></li>
<li><p>our -- 创建一个词法变量，但实际上是包变量的别名，或者说是伪装成词法变量的包变量</p></li>
<li><p>直接使用 -- 不加任何声明的使用一个变量，将创建一个包变量</p></li>
</ul>

<p>下面我们详细说一下这几种方式</p>

<h2>直接使用  -- 包变量</h2>

<pre><code>$foo = 1;
</code></pre>

<p>在perl早期的时候，大家都是这么定义，使用变量的。</p>

<p>这么定义变量$foo将会是全局变量，也就是在程序的任何位置都能访问到它。</p>

<p>这样当随着代码规模的增长，会引起一个严重的问题，变量污染，比如：</p>

<pre><code>$foo = 1; # $foo -&gt; 1
f();
          # $foo -&gt; 2
sub f {
   $foo = 2;
}
</code></pre>

<p>如果不小心命名，则很容易在某个意想不到的位置，变量$foo被赋值，出现bug。</p>

<p>所以 perl5 引进了strict 和warnings 两个pragma,在代码上加上use strict后，所有没有</p>

<p>直接声明而使用的变量都会报错。</p>

<p>所以现在这种用法已经废弃了，在一些教程书中会这么开始教学，但这种用法在实际代码中是绝对不建议再使用的。</p>

<p>取而代之的是 my</p>

<h2>my -- 词法变量</h2>

<pre><code>my $foo = 1;
</code></pre>

<p>my 的出现，极大的解决了变量污染的问题，因为my所声明的变量是 -- 局部变量，词法作用域。</p>

<p>局部变量的概念，比较好理解，比如：</p>

<pre><code>my $foo = 1; # $foo -&gt; 1
f();
             # $foo -&gt; 1
sub f {
   my $foo = 2 # $foo -&gt; 2
}
</code></pre>

<p>在函数f中的$foo 之在局部范围内起作用，出了函数之后，就不再起作用，所以也就不会影响到外部的$foo</p>

<p>需要理解的是这里的词法作用域，词法作用域限制了局部变量的名字生存的范围，这里一个词法作用域，基本上就是一个BLOCK，也就是一个花括号阔住的范围。</p>

<p>所以，只要有一个BLOCK就会建立一个词法作用域，比如：</p>

<pre><code>my $foo = 1; # $foo -&gt; 1
f();
             # $foo -&gt; 1
sub f {
    my $foo = 2 # $foo -&gt; 2
    if ( 1 ) {
        my $foo = 3 # $foo -&gt; 3
    }
}
</code></pre>

<p>这里在函数f内部的if语句中，建立一个新的词法作用域，同样对这里的$foo赋值不会影响到外部的$foo</p>

<p>my基本上已经够用了，然而由于之前提到的strict 和warnings ,导致不能使用全局变量。</p>

<p>因此出现了our</p>

<h2>our -- 伪装成词法变量的包变量</h2>

<pre><code>our $foo = 1;
</code></pre>

<p>our 的出现解决了不能使用全局变量的问题，our所声明的变量是全局变量的词法作用域的别名。</p>

<p>意思就是，这里$foo是$main::foo的别名，如果是在模块MyModule中声明的话，就是$MyModule::foo.</p>

<p>但是它同时又是词法作用域的，所以在词法作用域范围外无法访问到它，只能通过模块变量名$MyModule::foo来访问</p>

<p>可以说 our 所声明的变量是伪装成词法变量的全局变量。</p>

<p>举个例子：</p>

<pre><code>package A;

{
    our $foo = 1;
    print $foo;     # 1
}
print $foo;         # error
print $A::foo;      # 1

package B;
print $A::foo;      # 1
</code></pre>

<p>这里在花括号之外将无法访问到$foo, 但能通过模块变量名来访问 $A::foo</p>

<p>在模块B中，也能通过$A::foo来访问模块A所定义的变量。</p>

<h2>local -- 包变量的临时赋值</h2>

<pre><code>local $foo = 1;
</code></pre>

<p>local 并不创建一个新的变量，而是对已有的包变量临时赋予一个值，在退出当前scope后将原来的值还回去。</p>

<pre><code>$foo = 1;                 # $foo -&gt; 1
{
    local $foo = 2;       # $foo -&gt; 2  将原先的$foo藏起来，赋予一个临时的值
}
$foo                      # $foo -&gt; 1  将藏起来的值还回去
</code></pre>

<p>看起来有点像my,local确实是在my出现以前的解决方案，在my出来之后，使用的情形也就不多了。</p>

<p>比较有意思的是，local是动态作用域，什么意思呢？ 我们比较一下下面两个代码：</p>

<pre><code>my $foo = 1;
{
    my $foo = 2;
    f();
}
sub f {
    print "foo is $foo";
}
</code></pre>

<p>结果是</p>

<pre><code>foo is 1
</code></pre>

<p>因为词法作用域的$foo对函数f也是不可见的,函数f看到的是在最外层的$foo,而local就不同了</p>

<pre><code>$foo = 1;
{
    local $foo = 2;
    f();
}
sub f {
    print "foo is $foo";
}
</code></pre>

<p>结果是</p>

<pre><code>foo is 2
</code></pre>

<p>这就是动态作用域，对一般的代码来说，local的适用范围并不广，因为本身全局变量就是不提倡使用的，而local只对全局变量起作用，</p>

<p>可能有些时候你需要对内建的全局变量比如 $/, $_ 临时赋值，这时候会用到local。</p>

<h1>state -- 词法变量,静态变量</h1>

<pre><code>state $foo = 1;
</code></pre>

<p>state比较好理解，它就像c中的静态变量一样，只在第一次调用时候创建该变量，之后都是操作的同一个变量</p>

<p>state也是词法变量，所以只在定义该变量的词法作用域中有效，举个例子：</p>

<pre><code>sub count {
    state $counter = 0;
    $counter++;
    return $counter;
}
say count();
say count();
say count();
</code></pre>

<h1>总结</h1>

<p>因为perl的向下兼容性做的非常好，所以perl也抗了很多历史包袱，比如这里提到的不声明直接使用的全局变量。</p>

<p>现在提倡的用法是变量都用my声明，在需要全局包变量的情况下，用our声明，所有代码前都要加上use strict 和use warnings</p>

<p>这两个pragma, 在某些特定的时候会需要local 和 static 。</p>

                <p><a href="tadegenban.github.io/blog/2014/09/23/my-our-local-state.html#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="/blog/tag/perl/index.html">perl</a>
            </p>
        ]]></content>
        <updated>2014-09-23T00:00:00Z</updated>
        <category term="ARRAY(0x2df3fd0)" />
    </entry>
    <entry>
        <id>tadegenban.github.io/blog/2014/06/19/emacs-auto-split-windows.html</id>
        <title>Emacs 自动分割窗口</title>
        <author><name>tadegenban</name></author>
        <link rel="alternate" href="tadegenban.github.io/blog/2014/06/19/emacs-auto-split-windows.html" />
        <content type="html"><![CDATA[
            <p>使用Emacs的时候我总是习惯分三个窗口，Code一个，org一个，dir一个</p>

<p>每次启动Emacs都要C-x-3 C-x-2来建立窗口，后面就自己尝试写了一点Elisp</p>

<p>来每次启动的时候自动分割窗口，如下,</p>

<pre><code>(add-hook 'window-setup-hook (lambda () (split-window-horizontally)
                           (select-window-2)
                           (split-window-vertically) )
      )
</code></pre>

<p>把这段代码放到.emacs文件里或者.emacs.d里的配置文件就可以了</p>

                <p><a href="tadegenban.github.io/blog/2014/06/19/emacs-auto-split-windows.html#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="/blog/tag/emacs/index.html">emacs</a>
            </p>
        ]]></content>
        <updated>2014-06-19T00:00:00Z</updated>
        <category term="ARRAY(0x2de3870)" />
    </entry>
</feed>

