<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>tadegenban.github.io/index.html</id>
    <title>TADEGENBAN</title>
    <updated>2014-08-18T21:21:20Z</updated>
    <link rel="self" href="tadegenban.github.io/blog/index.atom"/>
    <link rel="alternate" href="tadegenban.github.io/index.html"/>
    <generator version="0.013">Statocles</generator>
    <entry>
        <id>tadegenban.github.io/blog/2014/06/25/tools-for-silvaco.html</id>
        <title>tools for silvaco</title>
        <author><name>tadegenban</name></author>
        <link rel="alternate" href="tadegenban.github.io/blog/2014/06/25/tools-for-silvaco.html" />
        <content type="html"><![CDATA[
            <h2>mathematica</h2>

<h3>silvaco文件解释</h3>

<ul>
<li>状态: 维护</li>
<li>功能: 提供对silvaco的str文件和log文件，内部数据的意义解释，从而可以对其数据操作，提取，计算，得到想要的数据。</li>
<li><p>特别: 集成于nbassemble中</p>

<h3>数据提取</h3></li>
<li><p>状态: 暂停</p></li>
<li>功能:
<ul>
<li>最早使用提取str文件数据，由于当时未发现n,s属性的具体意义，而是按照位置找出所要的数据，所以其使用范围将有局限。
<ul>
<li>silvaco数据读取temperature掺杂浓度_更改复合模型.nb 为更改了复合模型以后，最后可用版本</li>
<li>silvaco数据读取temperature掺杂浓度.nb 为更改了复合模型之前，最后可用版本</li>
</ul></li>
</ul></li>
</ul>

<h2>gawk</h2>

<h3>strExtract</h3>

<ul>
<li>状态: 维护</li>
<li>功能:
<ul>
<li>strExtract.gawk 提取str文件中想要的数据，包括电流电压特性
<ul>
<li>pointSelect.gawk 提取固定点数据</li>
<li>boxSelect.gawk 提取矩形区域数据</li>
<li>batman.bat 批处理</li>
</ul></li>
</ul></li>
</ul>

<h3>strModify</h3>

<ul>
<li>状态: 维护</li>
<li>功能: 修改str文件中某项数据，需要自定义</li>
</ul>

<h3>voaCalc</h3>

<ul>
<li>状态: 维护</li>
<li>功能:
<ul>
<li>用来计算光通过voa两臂的相位改变，输出光功率等
<ul>
<li>读入为经过pointSelect的两点数据，输出为（电流差，折射率改变，相位差，光功率等）</li>
<li>请自定义电极名称</li>
</ul></li>
</ul></li>
</ul>

<h3>logExtract</h3>

<ul>
<li>状态: 维护</li>
<li>功能: 提取log文件指定数据（一列），输出为一行</li>
<li>目录: E:\gawk\workspace\Silvaco\logExtract</li>
</ul>

<h3>logMaker</h3>

<ul>
<li>状态: 维护</li>
<li>功能: 将已有数据导入，生成简单的log文件，以供tonyplot</li>
</ul>

<h3>TransientExtract</h3>

<ul>
<li>状态: 维护</li>
<li>功能: 将silvaco瞬态仿真输出的str文件中的温度数据提取出来，插入原log文件，目的是这样可以看到精度更高的数据。
<ul>
<li>TransientExtract.awk          提取单个str文件的瞬态时间，温度。需输入2个点坐标作为参数。会显示细节</li>
<li>TransientExtract_direct.awk   提取单个str文件的瞬态时间，温度。需输入2个点坐标作为参数。不显示细节</li>
<li>implant.awk                   将上述程序提取出的数据，插入原log文件相应位置。</li>
<li>TEbatch.bat                   批处理命令，调用上述awk程序，自动完成数据提取及修改。</li>
</ul></li>
<li>特别: 目前是提取温度，可以自定义修改想要提取的数据。</li>
</ul>

<h3>selSort</h3>

<ul>
<li>状态: 维护</li>
<li>功能: 选择排序</li>
</ul>

        ]]></content>
        <updated>2014-06-25T00:00:00Z</updated>
        <category term="ARRAY(0x3fef658)" />
    </entry>
    <entry>
        <id>tadegenban.github.io/blog/2014/06/19/markdown-guide.html</id>
        <title>Markdown 语法</title>
        <author><name>tadegenban</name></author>
        <link rel="alternate" href="tadegenban.github.io/blog/2014/06/19/markdown-guide.html" />
        <content type="html"><![CDATA[
            <h2>什么是Markdown</h2>

<p>Markdown是一个将文本转化为HTML的工具。简单来说，Markdown是一个兼顾可读性与易用性的轻量级标记体系。Markdown并不追求大而全，它只关心HTML里最常用的几个标记，对于一些不常用的标记它允许直接将HTML标记插入文本。</p>

<hr />

<h2>标题</h2>

<p>Markdown提供了两种方式（Setext和Atx）来显示标题。</p>

<h4>语法：</h4>

<pre><code>    Setext方式
    标题1
    =================

    标题2
    -----------------

    Atx方式
    # 标题1
    ## 标题2
    ###### 标题6
</code></pre>

<h4>效果：</h4>

<p>Setext方式</p>

<h1>标题1</h1>

<h2>标题2</h2>

<p>Atx方式</p>

<h1>标题1</h1>

<h2>标题2</h2>

<h6>标题6</h6>

<hr />

<h2>换行</h2>

<p>在文字的末尾使用两个或两个以上的空格来表示换行。</p>

<hr />

<h2>引用</h2>

<p>行首使用<code>&gt;</code>加上一个空格表示引用段落，内部可以嵌套多个引用。</p>

<h4>语法：</h4>

<pre><code>    &gt; 这是一个引用，
    &gt; 这里木有换行，
    &gt; 在这里换行了。
    &gt; &gt; 内部嵌套
</code></pre>

<h4>效果：</h4>

<blockquote>
  <p>这是一个引用，
  这里木有换行，
  在这里换行了。</p>
  
  <blockquote>
    <p>内部嵌套</p>
  </blockquote>
</blockquote>

<hr />

<h2>列表</h2>

<p><strong>无序列表</strong>使用<code>*</code>、<code>+</code>或<code>-</code>后面加上空格来表示。</p>

<h4>语法：</h4>

<pre><code>    * Item 1
    * Item 2
    * Item 3

    + Item 1
    + Item 2
    + Item 3

    - Item 1
    - Item 2
    - Item 3
</code></pre>

<h4>效果：</h4>

<ul>
<li>Item 1</li>
<li>Item 2</li>
<li><p>Item 3</p></li>
<li><p>Item 1</p></li>
<li>Item 2</li>
<li><p>Item 3</p></li>
<li><p>Item 1</p></li>
<li>Item 2</li>
<li>Item 3</li>
</ul>

<p><strong>有序列表</strong>使用数字加英文句号加空格表示。</p>

<h4>语法：</h4>

<pre><code>    1. Item 1
    2. Item 2
    3. Item 3
</code></pre>

<h4>效果：</h4>

<ol>
<li>Item 1</li>
<li>Item 2</li>
<li>Item 3</li>
</ol>

<hr />

<h2>代码区域</h2>

<p><strong>行内代码</strong>使用<strong>反斜杠</strong><code>`</code>表示。
<strong>代码段落</strong>则是在每行文字前加4个空格或者1个缩进符表示。</p>

<h4>语法：</h4>

<pre><code>    Bash中可以使用echo来进行输出。
            $ echo 'Something'
            $ echo -e '\tSomething\n'
</code></pre>

<h4>效果：</h4>

<p>Bash中可以使用echo来进行输出。</p>

<pre><code>    $ echo 'Something'
    $ echo -e '\tSomething\n'
</code></pre>

<hr />

<h2>强调</h2>

<p>Markdown使用<code>\*</code>或<code>\_</code>表示强调。</p>

<h4>语法：</h4>

<pre><code>    单星号 = *斜体*
    单下划线 = _斜体_
    双星号 = **加粗**
    双下划线 = __加粗__
</code></pre>

<h4>效果：</h4>

<p>单星号 = <em>斜体</em>
单下划线 = <em>斜体</em>
双星号 = <strong>加粗</strong>
双下划线 = <strong>加粗</strong></p>

<hr />

<h2>链接</h2>

<p>Markdown支持两种风格的链接：<em>Inline</em>和<em>Reference</em>。</p>

<h4>语法：</h4>

<p><em>Inline</em>：以中括号标记显示的链接文本，后面紧跟用小括号包围的链接。如果链接有title属性，则在链接中使用<strong>空格</strong>加<strong>"title属性"</strong>。
<em>Reference</em>：一般应用于多个不同位置使用相同链接。通常分为两个部分，调用部分为<code>[链接文本][ref]</code>；定义部分可以出现在文本中的其他位置，格式为<code>[ref]: http://some/link/address (可选的标题)</code>。
<em>注：ref中不区分大小写。</em></p>

<pre><code>    这是一个Inline[示例](http://metacpan.org "可选的title")。
    这是一个Reference[示例][ref]。
    [ref]: http://metacpan.org
</code></pre>

<h4>效果：</h4>

<p>这是一个<em>Inline</em><a href="http://metacpan.org" title="可选的title">示例</a>。
这是一个<em>Reference</em><a href="http://metacpan.org">示例</a>。</p>

<hr />

<h2>图片</h2>

<p>图片的使用方法基本上和链接类似，只是在中括号前加<strong>叹号</strong>。
<em>注：Markdown不能设置图片大小，如果必须设置则应使用HTML标记&lt;img&gt;。</em></p>

<h4>语法：</h4>

<pre><code>    Inline示例：![替代文本](/assets/images/jian.jpg "可选的title")
    Reference示例：![替代文本][pic]
    [pic]: /assets/images/ship.jpg "可选的title"
    HTML示例：&lt;img src="/assets/images/jian.jpg" alt="替代文本" title="标题文本" width="200" /&gt;
</code></pre>

<h4>效果：</h4>

<p><img src="/assets/images/jian.jpg" alt="替代文本" title="标题文本" width="200" /></p>

<hr />

<h2>其他</h2>

<h4>自动链接</h4>

<p>使用<strong>尖括号</strong>，可以为输入的URL或者邮箱自动创建链接。如<a href="m&#x61;i&#x6C;&#116;&#111;:&#116;&#101;s&#x74;&#64;&#100;&#x6F;&#x6D;&#x61;&#105;&#x6E;&#46;&#99;&#111;&#109;">&#116;&#101;s&#x74;&#64;&#100;&#x6F;&#x6D;&#x61;&#105;&#x6E;&#46;&#99;&#111;&#109;</a>。</p>

<h4>分隔线</h4>

<p>在一行中使用三个或三个以上的<code>*</code>、<code>-</code>或<code>_</code>可以添加分隔线，其中可以有空白，但是不能有其他字符。</p>

<h4>转义字符</h4>

<p>Markdown中的转义字符为<code>\</code>，可以转义的有：</p>

<ul>
<li>\\ 反斜杠</li>
<li>\` 反引号</li>
<li>\* 星号</li>
<li>\_ 下划线</li>
<li>\{\} 大括号</li>
<li>\[\] 中括号</li>
<li>\(\) 小括号</li>
<li>\# 井号</li>
<li>\+ 加号</li>
<li>\- 减号</li>
<li>\. 英文句号</li>
<li>\! 感叹号</li>
</ul>

<hr />

<h2>结语</h2>

<p>Markdown语法很大程度上减少了编辑的成本，但是在写作这篇文章的时候也发现某些标记对中文的支持似乎并不完美，虽然这些缺陷可以通过直接插入HTML代码解决（但这么做一点都不漂亮）。总的来说，能够在离线状态下使用命令行模式进行写作还是很爽的，相比在线写作模式精力可以更专注。</p>

        ]]></content>
        <updated>2014-06-19T00:00:00Z</updated>
        <category term="ARRAY(0x402e9c8)" />
    </entry>
    <entry>
        <id>tadegenban.github.io/blog/2014/06/19/emacs-auto-split-windows.html</id>
        <title>Emacs 自动分割窗口</title>
        <author><name>tadegenban</name></author>
        <link rel="alternate" href="tadegenban.github.io/blog/2014/06/19/emacs-auto-split-windows.html" />
        <content type="html"><![CDATA[
            <p>使用Emacs的时候我总是习惯分三个窗口，Code一个，org一个，dir一个</p>

<p>每次启动Emacs都要C-x-3 C-x-2来建立窗口，后面就自己尝试写了一点Elisp</p>

<p>来每次启动的时候自动分割窗口，如下,</p>

<pre><code>(add-hook 'window-setup-hook (lambda () (split-window-horizontally)
                           (select-window-2)
                           (split-window-vertically) )
      )
</code></pre>

<p>把这段代码放到.emacs文件里或者.emacs.d里的配置文件就可以了</p>

        ]]></content>
        <updated>2014-06-19T00:00:00Z</updated>
        <category term="ARRAY(0x3fef4f0)" />
    </entry>
</feed>

