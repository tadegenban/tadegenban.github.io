<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>/blog/tag/perl-Moo-oop</id>
    <title>TADEGENBAN</title>
    <updated>2015-03-23T00:09:14Z</updated>
    <link rel="self" href="/blog/tag/perl-Moo-oop.atom"/>
    <link rel="alternate" href="/blog/tag/perl-Moo-oop"/>
    <generator version="0.042">Statocles</generator>
    <entry>
        <id>/blog/2014/10/11/moo-introduction.html</id>
        <title>用Moo来写面向对象perl</title>
        <author><name>tadegenban</name></author>
        <link rel="alternate" href="/blog/2014/10/11/moo-introduction.html" />
        <content type="html"><![CDATA[
            <h2>Moose 大家庭</h2>

<p>perl的原生的面向对象是比较简单的，通过bless关键字和hash来建立对象，很灵活但也很简陋</p>

<p>自从出现了Moose之后，perl的面向对象就很富有表现力了。</p>

<p>Moose -> Moos -> Moo -> Mo -> M, 再加上Mouse， 构成了Moose大家庭</p>

<p>从Moose到M依次功能递减， M 代表 nothing， 在不太复杂的项目一般用Moo就足够了</p>

<p>这里简单介绍一下Moo的用法</p>

<h2>Moo -- 轻量级面向对象</h2>

<p>比如我要建立一个Person对象，用Moo可以这么写:</p>

<pre><code>package Person;
use Moo;

has name =&gt; is =&gt; 'rw';
has age  =&gt; is =&gt; 'rw';

sub intro {
    my $self = shift;
    print "My name is ". $self-&gt;name;
}
</code></pre>

<p>在你的代码里就可以这么建立一个Person对象:</p>

<pre><code>use Person;

my $lip = Person-&gt;new(name =&gt; 'lip', age =&gt; 18 );
$lip-&gt;intro();
</code></pre>

<p>和perl的原生OOP一样，一个package就是一个对象。</p>

<p>Moo提供了一个<code>has</code>关键字，用来定义属性</p>

<pre><code>has name =&gt; is =&gt; 'rw';
</code></pre>

<p>表示属性<code>name</code> 是 可读可写 的，如果写成<code>'ro'</code>就表示是只读的</p>

<p><code>sub intro</code> 定义了一个方法， <code>$self</code> 是指代实例本身， <code>$self-&gt;name</code> 就可以得到name属性的值</p>

<p>下面详细介绍一些Moo的特性</p>

<h2>属性定义 -- has</h2>

<pre><code>has attr =&gt; is =&gt; 'rw', default =&gt; 'default';
</code></pre>

<p>or</p>

<p>has attr => (
       is => 'rw',
       default => 'default',
       )</p>

<p>因为小括号只是起到分组的作用，所以两种写法都是一样的。</p>

<p>has 的 options 有：</p>

<p>is(必要的) : 可以是'rw' 读写, 'ro' 只读, 'lazy' 惰性</p>

<p>isa : 用来定义这个属性的类型， 比如：</p>

<pre><code>isa =&gt; sub { die "$_[0] is not a number!" unless looks_like_number $_[0] }
</code></pre>

<p>就确保该属性是一个数字。</p>

<p>default:  默认值，需要注意的是这里一般是传个匿名函数作为值，比如你要默认值为一个空数组引用：</p>

<pre><code>default =&gt; sub { [] };
</code></pre>

<p>builder : 这个一般配合lazy使用，在lazy=1时，属性的值不会在对象建立的时候建立，而是在第一次求值的时候调用builder来计算</p>

<p>lazy :  如上</p>

<p>reader/writer : 你可以定义一个reader给属性， 比如 get_attr， 定义一个writer为 set_attr</p>

<pre><code>            只是相比$self-&gt;attr既是读又是写，来的更浅显
</code></pre>

<h2>对象继承 -- extends</h2>

<h2>方法修改器 -- before after around</h2>

                <p><a href="/blog/2014/10/11/moo-introduction.html#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="/blog/tag/perl-Moo-oop">perl Moo oop</a>
            </p>
        ]]></content>
        <updated>2014-10-11T00:00:00Z</updated>
        <category term="perl Moo oop" />
    </entry>
</feed>

