<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>/blog/tag/perl</id>
    <title>TADEGENBAN</title>
    <updated>2015-03-23T00:12:45Z</updated>
    <link rel="self" href="/blog/tag/perl.atom"/>
    <link rel="alternate" href="/blog/tag/perl"/>
    <generator version="0.042">Statocles</generator>
    <entry>
        <id>/blog/2015/01/19/perl-tricks.html</id>
        <title>perl tricks</title>
        <author><name>tadegenban</name></author>
        <link rel="alternate" href="/blog/2015/01/19/perl-tricks.html" />
        <content type="html"><![CDATA[
            <p>这是我在知乎上的答题。</p>

<h2>// 操作符</h2>

<pre><code>$a = $b // $c;
# $a = $b, 如果$b 为undef, $a = $c
</code></pre>

<p>常常我会这么写来给变量定义一个默认值</p>

<pre><code>$some_var //= 0;
</code></pre>

<h2>... yada yada</h2>

<p>当我们定义一个函数而打算在未来实现它</p>

<pre><code>sub unimplemented {
    ...
}
</code></pre>

<p>三个dot 这个操作符表示这里还有待实现，程序运行不会报错，但如果使用到这个未定义的函数，则会抛出'unimplement'的异常
这个操作符有个名字 yada yada 是来自日语的词汇，释义为等等，之类的意思</p>

<h2>-> 和 autobox</h2>

<p>-> 操作符有个比较有意思的一个地方，除了我们常用的</p>

<pre><code>$hash-&gt;{key}
$list-&gt;[0]
$obj-&gt;method()
</code></pre>

<p>之外，还有一个神奇的功能来实现autobox,也就是所谓的·一切皆对象·</p>

<pre><code>my $len = sub { length(shift) };
"hello"-&gt;$len();
</code></pre>

<p>如果想要没有$的autobox， "hello"->len(),可以看看CPAN 上的autobox::Core</p>

<h2>s///r</h2>

<p>是否遇到希望用s///来得到想要的字符串而不希望改变原来的变量？</p>

<pre><code>$x = "I like dogs.";
$y = $x =~ s/dogs/cats/r;
print "$x $y\n"; # prints "I like dogs. I like cats."
</code></pre>

<h2>here doc 和 inline file</h2>

<p>here doc 可以像下面这样定义一个长的字符串</p>

<pre><code>my $str = &lt;&lt;__;
some string here
bla blah
__
</code></pre>

<p>inline file 可以像下面这样在程序内部定义一个file，就像操作文件句柄一样</p>

<pre><code>while( &lt;DATA&gt; ) {
    print;
}
__DATA__
a b c d
1 2 3 4
</code></pre>

<h2>flip-flop</h2>

<p>.. 除了在列表上下文作为范围操作符使用</p>

<pre><code>'a'..'z' # ('a', 'b', ... 'z')

在标量上下文也有特别的用法，称作flip-flop操作符，行为就像一个状态触发器。
</code></pre>

<p>while(<$fh>)
{
  next if 1..100; # skip 1 ~ 100 line
  ...
}</p>

<h2>autovivification</h2>

<p>这个应该是perl所特有的一种用法
使得我可以不必依次定义一个数据的每一级类型，而直接对其进行任意深度的赋值</p>

<pre><code>my $hash = {};
$hash-&gt;{a}-&gt;{b}-&gt;{c} = 1;
</code></pre>

<p>方便之外，也可能会带来麻烦</p>

<pre><code>my $hash = {};
if ( exists $hash-&gt;{a} ) {
    print 'exists';     # no
}
if ( exists $hash-&gt;{a}-&gt;{b} ) {
    print 'exists';     # no
}
if ( exists $hash-&gt;{a} ) {
    print 'exists now'  # yes
    }
</code></pre>

<p>我们可以使用<code>no autovivification</code> 来关闭这一特性</p>

<h2>quote word list: qw</h2>

<p>这个非常常用，在写一个字符串数组的时候,不用麻烦的大引号了逗号了</p>

<pre><code>qw( item1 item2 item3 )  =&gt; ('item1', 'item2', 'item3')
</code></pre>

<h2>x</h2>

<pre><code>'a' x 4 # 'aaaa'
</code></pre>

<p>对数组同样有效</p>

<pre><code>(1,2,3) x 3 # (1,2,3,1,2,3,1,2,3)
</code></pre>

<h2>label</h2>

<p>可以在任意位置定义标签，通过goto 进行跳转。
当然很多人都不推荐在程序大量使用goto, 但是perl中定义标签还有一个非常有用的功能，就是循环中使用next 或 last + 标签来进行跨层使用。</p>

<pre><code>LABEL:
for ( @list_A) {
    for ( @list_B ) {
       ...;
       next LABEL;
    }

}
</code></pre>

<h2>@{[...]}</h2>

<p>由于perl的sigil的存在，使得perl在print 的时候很容易内插变量，比如在c 中</p>

<pre><code>printf("my name is %s, i'm %d", name, age)
</code></pre>

<p>而在perl 中就可以这么写</p>

<pre><code>print "my name is $name, i'm $age";
</code></pre>

<p>@{[...]} 更是极大的扩展了这一功能，你可以在字符串中内插表达式</p>

<pre><code>my $x = 1;
my $y = 2;
print "$x + $y = @{[ $x + $y ]}"
</code></pre>

<h2>($x, $y) = ($y, $x );</h2>

<p>python 中的 a, b = b, a</p>

                <p><a href="/blog/2015/01/19/perl-tricks.html#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="/blog/tag/perl">perl</a>
            </p>
        ]]></content>
        <updated>2015-01-19T00:00:00Z</updated>
        <category term="perl" />
    </entry>
    <entry>
        <id>/blog/2014/09/23/my-our-local-state.html</id>
        <title>perl 变量 my our local state</title>
        <author><name>tadegenban</name></author>
        <link rel="alternate" href="/blog/2014/09/23/my-our-local-state.html" />
        <content type="html"><![CDATA[
            <h2>perl 变量类型与作用域</h2>

<p>根据作用域的不同来区分，perl有两种变量类型：</p>

<ul>
<li><p>词法变量(Lexical Variable) -- 词法作用域，只在当前词法作用域内可见。</p></li>
<li><p>包变量(Package Variable)  -- 全局变量，在任何位置可见</p></li>
</ul>

<p>有三种创建变量的方式：</p>

<ul>
<li><p>my  -- 创建一个词法变量</p></li>
<li><p>our -- 创建一个词法变量，但实际上是包变量的别名，或者说是伪装成词法变量的包变量</p></li>
<li><p>直接使用 -- 不加任何声明的使用一个变量，将创建一个包变量</p></li>
</ul>

<p>下面我们详细说一下这几种方式</p>

<h2>直接使用  -- 包变量</h2>

<pre><code>$foo = 1;
</code></pre>

<p>在perl早期的时候，大家都是这么定义，使用变量的。</p>

<p>这么定义变量$foo将会是全局变量，也就是在程序的任何位置都能访问到它。</p>

<p>这样当随着代码规模的增长，会引起一个严重的问题，变量污染，比如：</p>

<pre><code>$foo = 1; # $foo -&gt; 1
f();
          # $foo -&gt; 2
sub f {
   $foo = 2;
}
</code></pre>

<p>如果不小心命名，则很容易在某个意想不到的位置，变量$foo被赋值，出现bug。</p>

<p>所以 perl5 引进了strict 和warnings 两个pragma,在代码上加上use strict后，所有没有</p>

<p>直接声明而使用的变量都会报错。</p>

<p>所以现在这种用法已经废弃了，在一些教程书中会这么开始教学，但这种用法在实际代码中是绝对不建议再使用的。</p>

<p>取而代之的是 my</p>

<h2>my -- 词法变量</h2>

<pre><code>my $foo = 1;
</code></pre>

<p>my 的出现，极大的解决了变量污染的问题，因为my所声明的变量是 -- 局部变量，词法作用域。</p>

<p>局部变量的概念，比较好理解，比如：</p>

<pre><code>my $foo = 1; # $foo -&gt; 1
f();
             # $foo -&gt; 1
sub f {
   my $foo = 2 # $foo -&gt; 2
}
</code></pre>

<p>在函数f中的$foo 之在局部范围内起作用，出了函数之后，就不再起作用，所以也就不会影响到外部的$foo</p>

<p>需要理解的是这里的词法作用域，词法作用域限制了局部变量的名字生存的范围，这里一个词法作用域，基本上就是一个BLOCK，也就是一个花括号阔住的范围。</p>

<p>所以，只要有一个BLOCK就会建立一个词法作用域，比如：</p>

<pre><code>my $foo = 1; # $foo -&gt; 1
f();
             # $foo -&gt; 1
sub f {
    my $foo = 2 # $foo -&gt; 2
    if ( 1 ) {
        my $foo = 3 # $foo -&gt; 3
    }
}
</code></pre>

<p>这里在函数f内部的if语句中，建立一个新的词法作用域，同样对这里的$foo赋值不会影响到外部的$foo</p>

<p>my基本上已经够用了，然而由于之前提到的strict 和warnings ,导致不能使用全局变量。</p>

<p>因此出现了our</p>

<h2>our -- 伪装成词法变量的包变量</h2>

<pre><code>our $foo = 1;
</code></pre>

<p>our 的出现解决了不能使用全局变量的问题，our所声明的变量是全局变量的词法作用域的别名。</p>

<p>意思就是，这里$foo是$main::foo的别名，如果是在模块MyModule中声明的话，就是$MyModule::foo.</p>

<p>但是它同时又是词法作用域的，所以在词法作用域范围外无法访问到它，只能通过模块变量名$MyModule::foo来访问</p>

<p>可以说 our 所声明的变量是伪装成词法变量的全局变量。</p>

<p>举个例子：</p>

<pre><code>package A;

{
    our $foo = 1;
    print $foo;     # 1
}
print $foo;         # error
print $A::foo;      # 1

package B;
print $A::foo;      # 1
</code></pre>

<p>这里在花括号之外将无法访问到$foo, 但能通过模块变量名来访问 $A::foo</p>

<p>在模块B中，也能通过$A::foo来访问模块A所定义的变量。</p>

<h2>local -- 包变量的临时赋值</h2>

<pre><code>local $foo = 1;
</code></pre>

<p>local 并不创建一个新的变量，而是对已有的包变量临时赋予一个值，在退出当前scope后将原来的值还回去。</p>

<pre><code>$foo = 1;                 # $foo -&gt; 1
{
    local $foo = 2;       # $foo -&gt; 2  将原先的$foo藏起来，赋予一个临时的值
}
$foo                      # $foo -&gt; 1  将藏起来的值还回去
</code></pre>

<p>看起来有点像my,local确实是在my出现以前的解决方案，在my出来之后，使用的情形也就不多了。</p>

<p>比较有意思的是，local是动态作用域，什么意思呢？ 我们比较一下下面两个代码：</p>

<pre><code>my $foo = 1;
{
    my $foo = 2;
    f();
}
sub f {
    print "foo is $foo";
}
</code></pre>

<p>结果是</p>

<pre><code>foo is 1
</code></pre>

<p>因为词法作用域的$foo对函数f也是不可见的,函数f看到的是在最外层的$foo,而local就不同了</p>

<pre><code>$foo = 1;
{
    local $foo = 2;
    f();
}
sub f {
    print "foo is $foo";
}
</code></pre>

<p>结果是</p>

<pre><code>foo is 2
</code></pre>

<p>这就是动态作用域，对一般的代码来说，local的适用范围并不广，因为本身全局变量就是不提倡使用的，而local只对全局变量起作用，</p>

<p>可能有些时候你需要对内建的全局变量比如 $/, $_ 临时赋值，这时候会用到local。</p>

<h2>state -- 词法变量,静态变量</h2>

<pre><code>state $foo = 1;
</code></pre>

<p>state比较好理解，它就像c中的静态变量一样，只在第一次调用时候创建该变量，之后都是操作的同一个变量</p>

<p>state也是词法变量，所以只在定义该变量的词法作用域中有效，举个例子：</p>

<pre><code>sub count {
    state $counter = 0;
    $counter++;
    return $counter;
}
say count();
say count();
say count();
</code></pre>

<h2>总结</h2>

<p>因为perl的向下兼容性做的非常好，所以perl也抗了很多历史包袱，比如这里提到的不声明直接使用的全局变量。</p>

<p>现在提倡的用法是变量都用my声明，在需要全局包变量的情况下，用our声明，所有代码前都要加上use strict 和use warnings</p>

<p>这两个pragma, 在某些特定的时候会需要local 和 static 。</p>

                <p><a href="/blog/2014/09/23/my-our-local-state.html#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="/blog/tag/perl">perl</a>
            </p>
        ]]></content>
        <updated>2014-09-23T00:00:00Z</updated>
        <category term="perl" />
    </entry>
</feed>

