<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>TADEGENBAN</title>
        <link>tadegenban.github.io/blog/tag/perl-Moo-oop/index.html</link>
        <atom:link href="tadegenban.github.io/blog/tag/perl-Moo-oop.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of TADEGENBAN</description>
        <generator>Statocles 0.022</generator>
        <item>
            <title>用Moo来写面向对象perl</title>
            <link>tadegenban.github.io/blog/2014/10/11/moo-introduction.html</link>
            <guid>tadegenban.github.io/blog/2014/10/11/moo-introduction.html</guid>
            <description><![CDATA[
                <h2>Moose 大家庭</h2>

<p>perl的原生的面向对象是比较简单的，通过bless关键字和hash来建立对象，很灵活但也很简陋。</p>

<p>自从出现了Moose之后，perl的面向对象就很富有表现力了。</p>

<p>Moose -> Moos -> Moo -> Mo -> M, 再加上Mouse， 构成了Moose大家庭</p>

<p>从Moose到M依次功能递减， M 代表 nothing， 在不太复杂的项目一般用Moo就足够了</p>

<p>这里简单介绍一下Moo的用法</p>

<h2>Moo -- 轻量级面向对象</h2>

<p>比如我要建立一个Person对象，用Moo可以这么写:</p>

<pre><code>package Person;
use Moo;

has name =&gt; is =&gt; 'rw';
has age  =&gt; is =&gt; 'rw';

sub intro {
    my $self = shift;
    print "My name is ". $self-&gt;name;
}
</code></pre>

<p>在你的代码里就可以这么建立一个Person对象:</p>

<pre><code>use Person;

my $lip = Person-&gt;new(name =&gt; 'lip', age =&gt; 18 );
$lip-&gt;intro();
</code></pre>

<p>和perl的原生OOP一样，一个package就是一个对象。</p>

<p>Moo提供了一个<code>has</code>关键字，用来定义属性</p>

<pre><code>has name =&gt; is =&gt; 'rw';
</code></pre>

<p>表示属性<code>name</code> 是 可读可写 的，如果写成<code>'ro'</code>就表示是只读的</p>

<p><code>sub intro</code> 定义了一个方法， <code>$self</code> 是指代实例本身， <code>$self-&gt;name</code> 就可以得到name属性的值</p>

<p>下面详细介绍一些Moo的特性</p>

<h2>属性定义 -- has</h2>

<h2>对象继承 -- extends</h2>

<h2>方法修改器 -- before after around</h2>

                    <p><a href="tadegenban.github.io/blog/2014/10/11/moo-introduction.html#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="/blog/tag/perl-Moo-oop/index.html">perl Moo oop</a>
                </p>
            ]]></description>
            <pubDate>
                六, 11 10月 2014 00:00:00 +0800
            </pubDate>
        </item>
    </channel>
</rss>

